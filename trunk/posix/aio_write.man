AIO_WRITE(3POSIX)                                    POSIX Programmer's Manual                                    AIO_WRITE(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult
       the corresponding Linux manual page for details of Linux behavior), or the interface may not be implemented on Linux.

NAME
       aio_write — asynchronous write to a file

SYNOPSIS
       #include <aio.h>

       int aio_write(struct aiocb *aiocbp);

DESCRIPTION
par.1  The aio_write() function shall write aiocbp->aio_nbytes to the file  associated  with  aiocbp->aio_fildes  from  the  buffer
       pointed  to by aiocbp->aio_buf. The function shall return when the write request has been initiated or, at a minimum, queued
       to the file or device.

    2  If prioritized I/O is supported for this file, then the asynchronous operation shall be submitted at a priority equal  to  a
       base  scheduling priority minus aiocbp->aio_reqprio. If Thread Execution Scheduling is not supported, then the base schedul‐
       ing priority is that of the calling process;
       otherwise, the base scheduling priority is that of the calling thread.

    3  The aiocbp argument may be used as an argument to aio_error() and aio_return() in order to determine the  error  status  and
       return status, respectively, of the asynchronous operation while it is proceeding.

    4  The  aiocbp  argument points to an aiocb structure. If the buffer pointed to by aiocbp->aio_buf or the control block pointed
       to by aiocbp becomes an illegal address prior to asynchronous I/O completion, then the behavior is undefined.

    5  If O_APPEND is not set for the file descriptor aio_fildes, then the requested operation shall take  place  at  the  absolute
       position  in  the  file  as given by aio_offset, as if lseek() were called immediately prior to the operation with an offset
       equal to aio_offset and a whence equal to SEEK_SET.  If O_APPEND is set for the file descriptor, or if aio_fildes is associ‐
       ated  with  a  device  that is incapable of seeking, write operations append to the file in the same order as the calls were
       made, except under circumstances described in Section 2.8.2, Asynchronous I/O.  After a successful call to enqueue an  asyn‐
       chronous I/O operation, the value of the file offset for the file is unspecified.

    6  The aio_sigevent member specifies the notification which occurs when the request is completed.

    7  The aiocbp->aio_lio_opcode field shall be ignored by aio_write().

    8  Simultaneous asynchronous operations using the same aiocbp produce undefined results.

    9  If  synchronized  I/O  is  enabled  on  the  file associated with aiocbp->aio_fildes, the behavior of this function shall be
       according to the definitions of synchronized I/O data integrity completion, and synchronized I/O file integrity completion.

    10 For any system action that changes the process memory space while an asynchronous I/O is outstanding to  the  address  range
       being changed, the result of that action is undefined.

    11 For  regular files, no data transfer shall occur past the offset maximum established in the open file description associated
       with aiocbp->aio_fildes.

RETURN VALUE
       The aio_write() function shall return the value zero if the I/O operation is successfully queued;  otherwise,  the  function
       shall return the value −1 and set errno to indicate the error.

ERRORS
       The aio_write() function shall fail if:

       EAGAIN The requested asynchronous I/O operation was not queued due to system resource limitations.

       Each of the following conditions may be detected synchronously at the time of the call to aio_write(), or asynchronously. If
       any of the conditions below are detected synchronously, the aio_write() function shall return −1 and set errno to the corre‐
       sponding  value. If any of the conditions below are detected asynchronously, the return status of the asynchronous operation
       shall be set to −1, and the error status of the asynchronous operation is set to the corresponding value.

       EBADF  The aiocbp->aio_fildes argument is not a valid file descriptor open for writing.

       EINVAL The file offset value implied by aiocbp->aio_offset would be invalid,
              aiocbp->aio_reqprio is not a valid value, or aiocbp->aio_nbytes is an invalid value.

       In the case that the aio_write() successfully queues the I/O operation, the return  status  of  the  asynchronous  operation
       shall  be  one  of the values normally returned by the write() function call. If the operation is successfully queued but is
       subsequently canceled or encounters an error, the error status for the asynchronous operation contains  one  of  the  values
       normally set by the write() function call, or one of the following:

       EBADF  The aiocbp->aio_fildes argument is not a valid file descriptor open for writing.

       EINVAL The file offset value implied by aiocbp->aio_offset would be invalid.

       ECANCELED
              The requested I/O was canceled before the I/O completed due to an explicit aio_cancel() request.

       The following condition may be detected synchronously or asynchronously:

       EFBIG  The file is a regular file, aiobcp->aio_nbytes is greater than 0, and the starting offset in aiobcp->aio_offset is at
              or beyond the offset maximum in the open file description associated with aiocbp->aio_fildes.

       The following sections are informative.

EXAMPLES
       None.

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       Section 2.8.2, Asynchronous I/O,  aio_cancel(),  aio_error(),  aio_read(),  aio_return(),  close(),  exec,  exit(),  fork(),
       lio_listio(), lseek(), write()

       The Base Definitions volume of POSIX.1‐2008, <aio.h>

COPYRIGHT
       Portions  of  this  text  are  reprinted  and reproduced in electronic form from IEEE Std 1003.1, 2013 Edition, Standard for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copyright
       (C)  2013  by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008 with the
       2013 Technical Corrigendum 1 applied.) In the event of any discrepancy between this version and the original  IEEE  and  The
       Open  Group  Standard,  the  original IEEE and The Open Group Standard is the referee document. The original Standard can be
       obtained online at http://www.unix.org/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during  the  conver‐
       sion  of  the  source  files  to  man  page  format. To report such errors, see https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .

IEEE/The Open Group                                             2013                                              AIO_WRITE(3POSIX)
