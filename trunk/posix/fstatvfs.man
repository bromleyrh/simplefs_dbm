FSTATVFS(3POSIX)                                     POSIX Programmer's Manual                                     FSTATVFS(3POSIX)

PROLOG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult
       the corresponding Linux manual page for details of Linux behavior), or the interface may not be implemented on Linux.

NAME
       fstatvfs, statvfs — get file system information

SYNOPSIS
       #include <sys/statvfs.h>

       int fstatvfs(int fildes, struct statvfs *buf);
       int statvfs(const char *restrict path, struct statvfs *restrict buf);

DESCRIPTION
par.1  The fstatvfs() function shall obtain information about the file system containing the file referenced by fildes.

    2  The statvfs() function shall obtain information about the file system containing the file named by path.

    3  For both functions, the buf argument is a pointer to a statvfs structure that shall be filled. Read, write, or execute  per‐
       mission of the named file is not required.

    4  The following flags can be returned in the f_flag member:

       ST_RDONLY   Read-only file system.

       ST_NOSUID   Setuid/setgid bits ignored by exec.

    5  It is unspecified whether all members of the statvfs structure have meaningful values on all file systems.

RETURN VALUE
       Upon successful completion, statvfs() shall return 0. Otherwise, it shall return −1 and set errno to indicate the error.

ERRORS
       The fstatvfs() and statvfs() functions shall fail if:

       EIO    An I/O error occurred while reading the file system.

       EINTR  A signal was caught during execution of the function.

       EOVERFLOW
              One of the values to be returned cannot be represented correctly in the structure pointed to by buf.

       The fstatvfs() function shall fail if:

       EBADF  The fildes argument is not an open file descriptor.

       The statvfs() function shall fail if:

       EACCES Search permission is denied on a component of the path prefix.

       ELOOP  A loop exists in symbolic links encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a component of a pathname is longer than {NAME_MAX}.

       ENOENT A component of path does not name an existing file or path is an empty string.

       ENOTDIR
              A component of the path prefix names an existing file that is neither a directory nor a symbolic link to a directory,
              or the path argument contains at least one non-<slash> character and ends with one or more trailing  <slash>  charac‐
              ters  and  the  last  pathname  component names an existing file that is neither a directory nor a symbolic link to a
              directory.

       The statvfs() function may fail if:

       ELOOP  More than {SYMLOOP_MAX} symbolic links were encountered during resolution of the path argument.

       ENAMETOOLONG
              The length of a pathname exceeds {PATH_MAX}, or pathname resolution of  a  symbolic  link  produced  an  intermediate
              result with a length that exceeds {PATH_MAX}.

       The following sections are informative.

EXAMPLES
   Obtaining File System Information Using fstatvfs()
       The  following  example  shows  how  to  obtain  file  system  information  for  the  file  system upon which the file named
       /home/cnd/mod1 resides, using the fstatvfs() function. The /home/cnd/mod1 file is opened with read/write privileges and  the
       open file descriptor is passed to the fstatvfs() function.

           #include <sys/statvfs.h>
           #include <fcntl.h>

           struct statvfs buffer;
           int            status;
           ...
           fildes = open("/home/cnd/mod1", O_RDWR);
           status  = fstatvfs(fildes, &buffer);

   Obtaining File System Information Using statvfs()
       The  following  example  shows  how  to  obtain  file  system  information  for  the  file  system upon which the file named
       /home/cnd/mod1 resides, using the statvfs() function.

           #include <sys/statvfs.h>

           struct statvfs buffer;
           int            status;
           ...
           status = statvfs("/home/cnd/mod1", &buffer);

APPLICATION USAGE
       None.

RATIONALE
       None.

FUTURE DIRECTIONS
       None.

SEE ALSO
       chmod(), chown(), creat(), dup(), exec, fcntl(), link(), mknod(), open(), pipe(), read(), time(), unlink(), utime(), write()

       The Base Definitions volume of POSIX.1‐2008, <sys_statvfs.h>

COPYRIGHT
       Portions of this text are reprinted and reproduced in electronic form from IEEE  Std  1003.1,  2013  Edition,  Standard  for
       Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, Copyright
       (C) 2013 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group.  (This is POSIX.1-2008  with  the
       2013  Technical  Corrigendum  1 applied.) In the event of any discrepancy between this version and the original IEEE and The
       Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The  original  Standard  can  be
       obtained online at http://www.unix.org/online.html .

       Any  typographical  or formatting errors that appear in this page are most likely to have been introduced during the conver‐
       sion of the source files to man  page  format.  To  report  such  errors,  see  https://www.kernel.org/doc/man-pages/report‐
       ing_bugs.html .

IEEE/The Open Group                                             2013                                               FSTATVFS(3POSIX)
